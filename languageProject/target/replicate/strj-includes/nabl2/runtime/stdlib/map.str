module nabl2/runtime/stdlib/map

imports
  signatures/nabl2/shared/-
  signatures/nabl2/shared/common/-
  signatures/nabl2/shared/constraints/-
  nabl2/shared/-
  signatures/nabl2/runtime/-
  signatures/nabl2/runtime/analysis/-
  signatures/nabl2/runtime/common/-
  nabl2/runtime/-
  nabl2/runtime/analysis/-
  nabl2/runtime/prelude/-
  nabl2/runtime/stdlib/-


rules


rules


rules


rules

  nabl2--generate-constraint-Map0-rule(|):
    (nabl2_source, term12@xs, args36) -> constraint33
    with(id)
    with(Params(params45@()) := args36
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ ()"
                               , " with actual "
                               , <nabl2--pp-flat-args> args36
                               , " when matching "
                               , "xs"
                               , " with "
                               , <pp-NaBL2-Term> term12
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map0"
                              , " [[ "
                              , <pp-NaBL2-Term> term12
                              , " ^ "
                              , <pp-NaBL2-CTerm> params45
                              , " ]]"
                              ]
           )
         end)
    with(constraint33 := CConj(
                           CAstProperty(<nabl2--get-ast-index> term12, Params(), ())
                         , <nabl2--generate-constraint(nabl2--generate-constraint-Map0-rule(nabl2--generate-constraint-default-rule)|"Map0")> (nabl2_source, xs, Params(()))
                         ))

  nabl2--generate-constraint-Map0-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term13@[x|xs], args37) -> constraint34
    with(id)
    with(Params(params46@()) := args37
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ ()"
                               , " with actual "
                               , <nabl2--pp-flat-args> args37
                               , " when matching "
                               , "[x|xs]"
                               , " with "
                               , <pp-NaBL2-Term> term13
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map0"
                              , " [[ "
                              , <pp-NaBL2-Term> term13
                              , " ^ "
                              , <pp-NaBL2-CTerm> params46
                              , " ]]"
                              ]
           )
         end)
    with(constraint34 := CConj(
                           CAstProperty(<nabl2--get-ast-index> term13, Params(), ())
                         , CConj(
                             <nabl2--generate-constraint(nabl2--generate-constraint-X-rule|"X")> (nabl2_source, x, Params(()))
                           , <nabl2--generate-constraint(nabl2--generate-constraint-Map0-rule(nabl2--generate-constraint-X-rule)|"Map0")> (nabl2_source, xs, Params(()))
                           )
                         ))

  nabl2--generate-constraint-Map0-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term14@[], args38) -> constraint35
    with(id)
    with(Params(params47@()) := args38
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ ()"
                               , " with actual "
                               , <nabl2--pp-flat-args> args38
                               , " when matching "
                               , "[]"
                               , " with "
                               , <pp-NaBL2-Term> term14
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map0"
                              , " [[ "
                              , <pp-NaBL2-Term> term14
                              , " ^ "
                              , <pp-NaBL2-CTerm> params47
                              , " ]]"
                              ]
           )
         end)
    with(constraint35 := CConj(
                           CAstProperty(<nabl2--get-ast-index> term14, Params(), ())
                         , CTrue(<nabl2--get-ast-index> term14)
                         ))


rules

  nabl2--generate-constraint-Map0t-rule(|):
    (nabl2_source, term15@xs, args33) -> constraint30
    with(ty := <nabl2--fresh-var(|nabl2_source)> "ty" ; id)
    with(ParamsAndType(params42@(), type15) := args33
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ () : type15"
                               , " with actual "
                               , <nabl2--pp-flat-args> args33
                               , " when matching "
                               , "xs"
                               , " with "
                               , <pp-NaBL2-Term> term15
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map0t"
                              , " [[ "
                              , <pp-NaBL2-Term> term15
                              , " ^ "
                              , <pp-NaBL2-CTerm> params42
                              , " : "
                              , <pp-NaBL2-objlangterm> type15
                              , " ]]"
                              ]
           )
         end)
    with(constraint30 := CConj(
                           CEqual(
                             type15
                           , ty
                           , Message(Error(), Default(), <nabl2--get-ast-index> term15)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term15, Type(), type15)
                           , CConj(
                               CAstProperty(<nabl2--get-ast-index> term15, Params(), ())
                             , <nabl2--generate-constraint(nabl2--generate-constraint-Map0t-rule(nabl2--generate-constraint-default-rule)|"Map0t")> (nabl2_source, xs, ParamsAndType((), ty))
                             )
                           )
                         ))

  nabl2--generate-constraint-Map0t-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term16@[x|xs], args34) -> constraint31
    with(ty := <nabl2--fresh-var(|nabl2_source)> "ty" ; id)
    with(ParamsAndType(params43@(), type16) := args34
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ () : type16"
                               , " with actual "
                               , <nabl2--pp-flat-args> args34
                               , " when matching "
                               , "[x|xs]"
                               , " with "
                               , <pp-NaBL2-Term> term16
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map0t"
                              , " [[ "
                              , <pp-NaBL2-Term> term16
                              , " ^ "
                              , <pp-NaBL2-CTerm> params43
                              , " : "
                              , <pp-NaBL2-objlangterm> type16
                              , " ]]"
                              ]
           )
         end)
    with(constraint31 := CConj(
                           CEqual(
                             type16
                           , ty
                           , Message(Error(), Default(), <nabl2--get-ast-index> term16)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term16, Type(), type16)
                           , CConj(
                               CAstProperty(<nabl2--get-ast-index> term16, Params(), ())
                             , CConj(
                                 <nabl2--generate-constraint(nabl2--generate-constraint-X-rule|"X")> (nabl2_source, x, ParamsAndType((), ty))
                               , <nabl2--generate-constraint(nabl2--generate-constraint-Map0t-rule(nabl2--generate-constraint-X-rule)|"Map0t")> (nabl2_source, xs, ParamsAndType((), ty))
                               )
                             )
                           )
                         ))

  nabl2--generate-constraint-Map0t-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term17@[], args35) -> constraint32
    with(wld1 := <nabl2--fresh-var(|nabl2_source)> "wld1" ; id)
    with(ParamsAndType(params44@(), type17) := args35
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ () : type17"
                               , " with actual "
                               , <nabl2--pp-flat-args> args35
                               , " when matching "
                               , "[]"
                               , " with "
                               , <pp-NaBL2-Term> term17
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map0t"
                              , " [[ "
                              , <pp-NaBL2-Term> term17
                              , " ^ "
                              , <pp-NaBL2-CTerm> params44
                              , " : "
                              , <pp-NaBL2-objlangterm> type17
                              , " ]]"
                              ]
           )
         end)
    with(constraint32 := CConj(
                           CEqual(
                             type17
                           , wld1
                           , Message(Error(), Default(), <nabl2--get-ast-index> term17)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term17, Type(), type17)
                           , CConj(
                               CAstProperty(<nabl2--get-ast-index> term17, Params(), ())
                             , CTrue(<nabl2--get-ast-index> term17)
                             )
                           )
                         ))


rules

  nabl2--generate-constraint-Map0T-rule(|):
    (nabl2_source, term18@xs, args30) -> constraint27
    with(tys := <nabl2--fresh-var(|nabl2_source)> "tys" ; id)
    with(ParamsAndType(params39@(), type18) := args30
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ () : type18"
                               , " with actual "
                               , <nabl2--pp-flat-args> args30
                               , " when matching "
                               , "xs"
                               , " with "
                               , <pp-NaBL2-Term> term18
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map0T"
                              , " [[ "
                              , <pp-NaBL2-Term> term18
                              , " ^ "
                              , <pp-NaBL2-CTerm> params39
                              , " : "
                              , <pp-NaBL2-objlangterm> type18
                              , " ]]"
                              ]
           )
         end)
    with(constraint27 := CConj(
                           CEqual(
                             type18
                           , tys
                           , Message(Error(), Default(), <nabl2--get-ast-index> term18)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term18, Type(), type18)
                           , CConj(
                               CAstProperty(<nabl2--get-ast-index> term18, Params(), ())
                             , <nabl2--generate-constraint(nabl2--generate-constraint-Map0T-rule(nabl2--generate-constraint-default-rule)|"Map0T")> (nabl2_source, xs, ParamsAndType((), tys))
                             )
                           )
                         ))

  nabl2--generate-constraint-Map0T-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term19@[x|xs], args31) -> constraint28
    with(ty := <nabl2--fresh-var(|nabl2_source)> "ty"
         ; tys := <nabl2--fresh-var(|nabl2_source)> "tys"
         ; id)
    with(ParamsAndType(params40@(), type19) := args31
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ () : type19"
                               , " with actual "
                               , <nabl2--pp-flat-args> args31
                               , " when matching "
                               , "[x|xs]"
                               , " with "
                               , <pp-NaBL2-Term> term19
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map0T"
                              , " [[ "
                              , <pp-NaBL2-Term> term19
                              , " ^ "
                              , <pp-NaBL2-CTerm> params40
                              , " : "
                              , <pp-NaBL2-objlangterm> type19
                              , " ]]"
                              ]
           )
         end)
    with(constraint28 := CConj(
                           CEqual(
                             type19
                           , CListTail([ty], tys)
                           , Message(Error(), Default(), <nabl2--get-ast-index> term19)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term19, Type(), type19)
                           , CConj(
                               CAstProperty(<nabl2--get-ast-index> term19, Params(), ())
                             , CConj(
                                 <nabl2--generate-constraint(nabl2--generate-constraint-X-rule|"X")> (nabl2_source, x, ParamsAndType((), ty))
                               , <nabl2--generate-constraint(nabl2--generate-constraint-Map0T-rule(nabl2--generate-constraint-X-rule)|"Map0T")> (nabl2_source, xs, ParamsAndType((), tys))
                               )
                             )
                           )
                         ))

  nabl2--generate-constraint-Map0T-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term20@[], args32) -> constraint29
    with(id)
    with(ParamsAndType(params41@(), type20) := args32
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ () : type20"
                               , " with actual "
                               , <nabl2--pp-flat-args> args32
                               , " when matching "
                               , "[]"
                               , " with "
                               , <pp-NaBL2-Term> term20
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map0T"
                              , " [[ "
                              , <pp-NaBL2-Term> term20
                              , " ^ "
                              , <pp-NaBL2-CTerm> params41
                              , " : "
                              , <pp-NaBL2-objlangterm> type20
                              , " ]]"
                              ]
           )
         end)
    with(constraint29 := CConj(
                           CEqual(
                             type20
                           , CList([])
                           , Message(Error(), Default(), <nabl2--get-ast-index> term20)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term20, Type(), type20)
                           , CConj(
                               CAstProperty(<nabl2--get-ast-index> term20, Params(), ())
                             , CTrue(<nabl2--get-ast-index> term20)
                             )
                           )
                         ))


rules

  nabl2--generate-constraint-Map1-rule(|):
    (nabl2_source, term21@xs, args27) -> constraint24
    with(id)
    with(Params(params36@(s)) := args27
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s)"
                               , " with actual "
                               , <nabl2--pp-flat-args> args27
                               , " when matching "
                               , "xs"
                               , " with "
                               , <pp-NaBL2-Term> term21
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map1"
                              , " [[ "
                              , <pp-NaBL2-Term> term21
                              , " ^ "
                              , <pp-NaBL2-CTerm> params36
                              , " ]]"
                              ]
           )
         end)
    with(constraint24 := CConj(
                           CAstProperty(
                             <nabl2--get-ast-index> term21
                           , Params()
                           , (s)
                           )
                         , <nabl2--generate-constraint(nabl2--generate-constraint-Map1-rule(nabl2--generate-constraint-default-rule)|"Map1")> (nabl2_source, xs, Params((s)))
                         ))

  nabl2--generate-constraint-Map1-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term22@[x|xs], args28) -> constraint25
    with(id)
    with(Params(params37@(s)) := args28
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s)"
                               , " with actual "
                               , <nabl2--pp-flat-args> args28
                               , " when matching "
                               , "[x|xs]"
                               , " with "
                               , <pp-NaBL2-Term> term22
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map1"
                              , " [[ "
                              , <pp-NaBL2-Term> term22
                              , " ^ "
                              , <pp-NaBL2-CTerm> params37
                              , " ]]"
                              ]
           )
         end)
    with(constraint25 := CConj(
                           CAstProperty(
                             <nabl2--get-ast-index> term22
                           , Params()
                           , (s)
                           )
                         , CConj(
                             <nabl2--generate-constraint(nabl2--generate-constraint-X-rule|"X")> (nabl2_source, x, Params((s)))
                           , <nabl2--generate-constraint(nabl2--generate-constraint-Map1-rule(nabl2--generate-constraint-X-rule)|"Map1")> (nabl2_source, xs, Params((s)))
                           )
                         ))

  nabl2--generate-constraint-Map1-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term23@[], args29) -> constraint26
    with(id)
    with(Params(params38@(s)) := args29
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s)"
                               , " with actual "
                               , <nabl2--pp-flat-args> args29
                               , " when matching "
                               , "[]"
                               , " with "
                               , <pp-NaBL2-Term> term23
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map1"
                              , " [[ "
                              , <pp-NaBL2-Term> term23
                              , " ^ "
                              , <pp-NaBL2-CTerm> params38
                              , " ]]"
                              ]
           )
         end)
    with(constraint26 := CConj(
                           CAstProperty(
                             <nabl2--get-ast-index> term23
                           , Params()
                           , (s)
                           )
                         , CTrue(<nabl2--get-ast-index> term23)
                         ))


rules

  nabl2--generate-constraint-Map1t-rule(|):
    (nabl2_source, term24@xs, args24) -> constraint21
    with(ty := <nabl2--fresh-var(|nabl2_source)> "ty" ; id)
    with(ParamsAndType(params33@(s), type21) := args24
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s) : type21"
                               , " with actual "
                               , <nabl2--pp-flat-args> args24
                               , " when matching "
                               , "xs"
                               , " with "
                               , <pp-NaBL2-Term> term24
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map1t"
                              , " [[ "
                              , <pp-NaBL2-Term> term24
                              , " ^ "
                              , <pp-NaBL2-CTerm> params33
                              , " : "
                              , <pp-NaBL2-objlangterm> type21
                              , " ]]"
                              ]
           )
         end)
    with(constraint21 := CConj(
                           CEqual(
                             type21
                           , ty
                           , Message(Error(), Default(), <nabl2--get-ast-index> term24)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term24, Type(), type21)
                           , CConj(
                               CAstProperty(
                                 <nabl2--get-ast-index> term24
                               , Params()
                               , (s)
                               )
                             , <nabl2--generate-constraint(nabl2--generate-constraint-Map1t-rule(nabl2--generate-constraint-default-rule)|"Map1t")> (nabl2_source, xs, ParamsAndType((s), ty))
                             )
                           )
                         ))

  nabl2--generate-constraint-Map1t-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term25@[x|xs], args25) -> constraint22
    with(ty := <nabl2--fresh-var(|nabl2_source)> "ty" ; id)
    with(ParamsAndType(params34@(s), type22) := args25
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s) : type22"
                               , " with actual "
                               , <nabl2--pp-flat-args> args25
                               , " when matching "
                               , "[x|xs]"
                               , " with "
                               , <pp-NaBL2-Term> term25
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map1t"
                              , " [[ "
                              , <pp-NaBL2-Term> term25
                              , " ^ "
                              , <pp-NaBL2-CTerm> params34
                              , " : "
                              , <pp-NaBL2-objlangterm> type22
                              , " ]]"
                              ]
           )
         end)
    with(constraint22 := CConj(
                           CEqual(
                             type22
                           , ty
                           , Message(Error(), Default(), <nabl2--get-ast-index> term25)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term25, Type(), type22)
                           , CConj(
                               CAstProperty(
                                 <nabl2--get-ast-index> term25
                               , Params()
                               , (s)
                               )
                             , CConj(
                                 <nabl2--generate-constraint(nabl2--generate-constraint-X-rule|"X")> (nabl2_source, x, ParamsAndType((s), ty))
                               , <nabl2--generate-constraint(nabl2--generate-constraint-Map1t-rule(nabl2--generate-constraint-X-rule)|"Map1t")> (nabl2_source, xs, ParamsAndType((s), ty))
                               )
                             )
                           )
                         ))

  nabl2--generate-constraint-Map1t-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term26@[], args26) -> constraint23
    with(wld1 := <nabl2--fresh-var(|nabl2_source)> "wld1" ; id)
    with(ParamsAndType(params35@(s), type23) := args26
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s) : type23"
                               , " with actual "
                               , <nabl2--pp-flat-args> args26
                               , " when matching "
                               , "[]"
                               , " with "
                               , <pp-NaBL2-Term> term26
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map1t"
                              , " [[ "
                              , <pp-NaBL2-Term> term26
                              , " ^ "
                              , <pp-NaBL2-CTerm> params35
                              , " : "
                              , <pp-NaBL2-objlangterm> type23
                              , " ]]"
                              ]
           )
         end)
    with(constraint23 := CConj(
                           CEqual(
                             type23
                           , wld1
                           , Message(Error(), Default(), <nabl2--get-ast-index> term26)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term26, Type(), type23)
                           , CConj(
                               CAstProperty(
                                 <nabl2--get-ast-index> term26
                               , Params()
                               , (s)
                               )
                             , CTrue(<nabl2--get-ast-index> term26)
                             )
                           )
                         ))


rules

  nabl2--generate-constraint-Map1T-rule(|):
    (nabl2_source, term27@xs, args21) -> constraint18
    with(tys := <nabl2--fresh-var(|nabl2_source)> "tys" ; id)
    with(ParamsAndType(params30@(s), type24) := args21
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s) : type24"
                               , " with actual "
                               , <nabl2--pp-flat-args> args21
                               , " when matching "
                               , "xs"
                               , " with "
                               , <pp-NaBL2-Term> term27
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map1T"
                              , " [[ "
                              , <pp-NaBL2-Term> term27
                              , " ^ "
                              , <pp-NaBL2-CTerm> params30
                              , " : "
                              , <pp-NaBL2-objlangterm> type24
                              , " ]]"
                              ]
           )
         end)
    with(constraint18 := CConj(
                           CEqual(
                             type24
                           , tys
                           , Message(Error(), Default(), <nabl2--get-ast-index> term27)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term27, Type(), type24)
                           , CConj(
                               CAstProperty(
                                 <nabl2--get-ast-index> term27
                               , Params()
                               , (s)
                               )
                             , <nabl2--generate-constraint(nabl2--generate-constraint-Map1T-rule(nabl2--generate-constraint-default-rule)|"Map1T")> (nabl2_source, xs, ParamsAndType((s), tys))
                             )
                           )
                         ))

  nabl2--generate-constraint-Map1T-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term28@[x|xs], args22) -> constraint19
    with(ty := <nabl2--fresh-var(|nabl2_source)> "ty"
         ; tys := <nabl2--fresh-var(|nabl2_source)> "tys"
         ; id)
    with(ParamsAndType(params31@(s), type25) := args22
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s) : type25"
                               , " with actual "
                               , <nabl2--pp-flat-args> args22
                               , " when matching "
                               , "[x|xs]"
                               , " with "
                               , <pp-NaBL2-Term> term28
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map1T"
                              , " [[ "
                              , <pp-NaBL2-Term> term28
                              , " ^ "
                              , <pp-NaBL2-CTerm> params31
                              , " : "
                              , <pp-NaBL2-objlangterm> type25
                              , " ]]"
                              ]
           )
         end)
    with(constraint19 := CConj(
                           CEqual(
                             type25
                           , CListTail([ty], tys)
                           , Message(Error(), Default(), <nabl2--get-ast-index> term28)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term28, Type(), type25)
                           , CConj(
                               CAstProperty(
                                 <nabl2--get-ast-index> term28
                               , Params()
                               , (s)
                               )
                             , CConj(
                                 <nabl2--generate-constraint(nabl2--generate-constraint-X-rule|"X")> (nabl2_source, x, ParamsAndType((s), ty))
                               , <nabl2--generate-constraint(nabl2--generate-constraint-Map1T-rule(nabl2--generate-constraint-X-rule)|"Map1T")> (nabl2_source, xs, ParamsAndType((s), tys))
                               )
                             )
                           )
                         ))

  nabl2--generate-constraint-Map1T-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term29@[], args23) -> constraint20
    with(id)
    with(ParamsAndType(params32@(s), type26) := args23
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s) : type26"
                               , " with actual "
                               , <nabl2--pp-flat-args> args23
                               , " when matching "
                               , "[]"
                               , " with "
                               , <pp-NaBL2-Term> term29
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map1T"
                              , " [[ "
                              , <pp-NaBL2-Term> term29
                              , " ^ "
                              , <pp-NaBL2-CTerm> params32
                              , " : "
                              , <pp-NaBL2-objlangterm> type26
                              , " ]]"
                              ]
           )
         end)
    with(constraint20 := CConj(
                           CEqual(
                             type26
                           , CList([])
                           , Message(Error(), Default(), <nabl2--get-ast-index> term29)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term29, Type(), type26)
                           , CConj(
                               CAstProperty(
                                 <nabl2--get-ast-index> term29
                               , Params()
                               , (s)
                               )
                             , CTrue(<nabl2--get-ast-index> term29)
                             )
                           )
                         ))


rules

  nabl2--generate-constraint-Map2-rule(|):
    (nabl2_source, term30@xs, args18) -> constraint15
    with(id)
    with(Params(params27@(s1, s2)) := args18
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2)"
                               , " with actual "
                               , <nabl2--pp-flat-args> args18
                               , " when matching "
                               , "xs"
                               , " with "
                               , <pp-NaBL2-Term> term30
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map2"
                              , " [[ "
                              , <pp-NaBL2-Term> term30
                              , " ^ "
                              , <pp-NaBL2-CTerm> params27
                              , " ]]"
                              ]
           )
         end)
    with(constraint15 := CConj(
                           CAstProperty(
                             <nabl2--get-ast-index> term30
                           , Params()
                           , (s1, s2)
                           )
                         , <nabl2--generate-constraint(nabl2--generate-constraint-Map2-rule(nabl2--generate-constraint-default-rule)|"Map2")> (nabl2_source, xs, Params((s1, s2)))
                         ))

  nabl2--generate-constraint-Map2-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term31@[x|xs], args19) -> constraint16
    with(id)
    with(Params(params28@(s1, s2)) := args19
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2)"
                               , " with actual "
                               , <nabl2--pp-flat-args> args19
                               , " when matching "
                               , "[x|xs]"
                               , " with "
                               , <pp-NaBL2-Term> term31
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map2"
                              , " [[ "
                              , <pp-NaBL2-Term> term31
                              , " ^ "
                              , <pp-NaBL2-CTerm> params28
                              , " ]]"
                              ]
           )
         end)
    with(constraint16 := CConj(
                           CAstProperty(
                             <nabl2--get-ast-index> term31
                           , Params()
                           , (s1, s2)
                           )
                         , CConj(
                             <nabl2--generate-constraint(nabl2--generate-constraint-X-rule|"X")> (nabl2_source, x, Params((s1, s2)))
                           , <nabl2--generate-constraint(nabl2--generate-constraint-Map2-rule(nabl2--generate-constraint-X-rule)|"Map2")> (nabl2_source, xs, Params((s1, s2)))
                           )
                         ))

  nabl2--generate-constraint-Map2-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term32@[], args20) -> constraint17
    with(id)
    with(Params(params29@(s1, s2)) := args20
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2)"
                               , " with actual "
                               , <nabl2--pp-flat-args> args20
                               , " when matching "
                               , "[]"
                               , " with "
                               , <pp-NaBL2-Term> term32
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map2"
                              , " [[ "
                              , <pp-NaBL2-Term> term32
                              , " ^ "
                              , <pp-NaBL2-CTerm> params29
                              , " ]]"
                              ]
           )
         end)
    with(constraint17 := CConj(
                           CAstProperty(
                             <nabl2--get-ast-index> term32
                           , Params()
                           , (s1, s2)
                           )
                         , CTrue(<nabl2--get-ast-index> term32)
                         ))


rules

  nabl2--generate-constraint-Map2t-rule(|):
    (nabl2_source, term33@xs, args15) -> constraint12
    with(ty := <nabl2--fresh-var(|nabl2_source)> "ty" ; id)
    with(ParamsAndType(params24@(s1, s2), type27) := args15
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2) : type27"
                               , " with actual "
                               , <nabl2--pp-flat-args> args15
                               , " when matching "
                               , "xs"
                               , " with "
                               , <pp-NaBL2-Term> term33
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map2t"
                              , " [[ "
                              , <pp-NaBL2-Term> term33
                              , " ^ "
                              , <pp-NaBL2-CTerm> params24
                              , " : "
                              , <pp-NaBL2-objlangterm> type27
                              , " ]]"
                              ]
           )
         end)
    with(constraint12 := CConj(
                           CEqual(
                             type27
                           , ty
                           , Message(Error(), Default(), <nabl2--get-ast-index> term33)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term33, Type(), type27)
                           , CConj(
                               CAstProperty(
                                 <nabl2--get-ast-index> term33
                               , Params()
                               , (s1, s2)
                               )
                             , <nabl2--generate-constraint(nabl2--generate-constraint-Map2t-rule(nabl2--generate-constraint-default-rule)|"Map2t")> ( nabl2_source
                                                                                                                                                    , xs
                                                                                                                                                    , ParamsAndType((s1, s2), ty)
                                                                                                                                                    )
                             )
                           )
                         ))

  nabl2--generate-constraint-Map2t-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term34@[x|xs], args16) -> constraint13
    with(ty := <nabl2--fresh-var(|nabl2_source)> "ty" ; id)
    with(ParamsAndType(params25@(s1, s2), type28) := args16
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2) : type28"
                               , " with actual "
                               , <nabl2--pp-flat-args> args16
                               , " when matching "
                               , "[x|xs]"
                               , " with "
                               , <pp-NaBL2-Term> term34
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map2t"
                              , " [[ "
                              , <pp-NaBL2-Term> term34
                              , " ^ "
                              , <pp-NaBL2-CTerm> params25
                              , " : "
                              , <pp-NaBL2-objlangterm> type28
                              , " ]]"
                              ]
           )
         end)
    with(constraint13 := CConj(
                           CEqual(
                             type28
                           , ty
                           , Message(Error(), Default(), <nabl2--get-ast-index> term34)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term34, Type(), type28)
                           , CConj(
                               CAstProperty(
                                 <nabl2--get-ast-index> term34
                               , Params()
                               , (s1, s2)
                               )
                             , CConj(
                                 <nabl2--generate-constraint(nabl2--generate-constraint-X-rule|"X")> ( nabl2_source
                                                                                                     , x
                                                                                                     , ParamsAndType((s1, s2), ty)
                                                                                                     )
                               , <nabl2--generate-constraint(nabl2--generate-constraint-Map2t-rule(nabl2--generate-constraint-X-rule)|"Map2t")> ( nabl2_source
                                                                                                                                                , xs
                                                                                                                                                , ParamsAndType((s1, s2), ty)
                                                                                                                                                )
                               )
                             )
                           )
                         ))

  nabl2--generate-constraint-Map2t-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term35@[], args17) -> constraint14
    with(wld1 := <nabl2--fresh-var(|nabl2_source)> "wld1" ; id)
    with(ParamsAndType(params26@(s1, s2), type29) := args17
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2) : type29"
                               , " with actual "
                               , <nabl2--pp-flat-args> args17
                               , " when matching "
                               , "[]"
                               , " with "
                               , <pp-NaBL2-Term> term35
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map2t"
                              , " [[ "
                              , <pp-NaBL2-Term> term35
                              , " ^ "
                              , <pp-NaBL2-CTerm> params26
                              , " : "
                              , <pp-NaBL2-objlangterm> type29
                              , " ]]"
                              ]
           )
         end)
    with(constraint14 := CConj(
                           CEqual(
                             type29
                           , wld1
                           , Message(Error(), Default(), <nabl2--get-ast-index> term35)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term35, Type(), type29)
                           , CConj(
                               CAstProperty(
                                 <nabl2--get-ast-index> term35
                               , Params()
                               , (s1, s2)
                               )
                             , CTrue(<nabl2--get-ast-index> term35)
                             )
                           )
                         ))


rules

  nabl2--generate-constraint-Map2T-rule(|):
    (nabl2_source, term36@xs, args12) -> constraint9
    with(tys := <nabl2--fresh-var(|nabl2_source)> "tys" ; id)
    with(ParamsAndType(params21@(s1, s2), type30) := args12
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2) : type30"
                               , " with actual "
                               , <nabl2--pp-flat-args> args12
                               , " when matching "
                               , "xs"
                               , " with "
                               , <pp-NaBL2-Term> term36
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map2T"
                              , " [[ "
                              , <pp-NaBL2-Term> term36
                              , " ^ "
                              , <pp-NaBL2-CTerm> params21
                              , " : "
                              , <pp-NaBL2-objlangterm> type30
                              , " ]]"
                              ]
           )
         end)
    with(constraint9 := CConj(
                          CEqual(
                            type30
                          , tys
                          , Message(Error(), Default(), <nabl2--get-ast-index> term36)
                          )
                        , CConj(
                            CAstProperty(<nabl2--get-ast-index> term36, Type(), type30)
                          , CConj(
                              CAstProperty(
                                <nabl2--get-ast-index> term36
                              , Params()
                              , (s1, s2)
                              )
                            , <nabl2--generate-constraint(nabl2--generate-constraint-Map2T-rule(nabl2--generate-constraint-default-rule)|"Map2T")> ( nabl2_source
                                                                                                                                                   , xs
                                                                                                                                                   , ParamsAndType((s1, s2), tys)
                                                                                                                                                   )
                            )
                          )
                        ))

  nabl2--generate-constraint-Map2T-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term37@[x|xs], args13) -> constraint10
    with(ty := <nabl2--fresh-var(|nabl2_source)> "ty"
         ; tys := <nabl2--fresh-var(|nabl2_source)> "tys"
         ; id)
    with(ParamsAndType(params22@(s1, s2), type31) := args13
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2) : type31"
                               , " with actual "
                               , <nabl2--pp-flat-args> args13
                               , " when matching "
                               , "[x|xs]"
                               , " with "
                               , <pp-NaBL2-Term> term37
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map2T"
                              , " [[ "
                              , <pp-NaBL2-Term> term37
                              , " ^ "
                              , <pp-NaBL2-CTerm> params22
                              , " : "
                              , <pp-NaBL2-objlangterm> type31
                              , " ]]"
                              ]
           )
         end)
    with(constraint10 := CConj(
                           CEqual(
                             type31
                           , CListTail([ty], tys)
                           , Message(Error(), Default(), <nabl2--get-ast-index> term37)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term37, Type(), type31)
                           , CConj(
                               CAstProperty(
                                 <nabl2--get-ast-index> term37
                               , Params()
                               , (s1, s2)
                               )
                             , CConj(
                                 <nabl2--generate-constraint(nabl2--generate-constraint-X-rule|"X")> ( nabl2_source
                                                                                                     , x
                                                                                                     , ParamsAndType((s1, s2), ty)
                                                                                                     )
                               , <nabl2--generate-constraint(nabl2--generate-constraint-Map2T-rule(nabl2--generate-constraint-X-rule)|"Map2T")> ( nabl2_source
                                                                                                                                                , xs
                                                                                                                                                , ParamsAndType((s1, s2), tys)
                                                                                                                                                )
                               )
                             )
                           )
                         ))

  nabl2--generate-constraint-Map2T-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term38@[], args14) -> constraint11
    with(id)
    with(ParamsAndType(params23@(s1, s2), type32) := args14
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2) : type32"
                               , " with actual "
                               , <nabl2--pp-flat-args> args14
                               , " when matching "
                               , "[]"
                               , " with "
                               , <pp-NaBL2-Term> term38
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map2T"
                              , " [[ "
                              , <pp-NaBL2-Term> term38
                              , " ^ "
                              , <pp-NaBL2-CTerm> params23
                              , " : "
                              , <pp-NaBL2-objlangterm> type32
                              , " ]]"
                              ]
           )
         end)
    with(constraint11 := CConj(
                           CEqual(
                             type32
                           , CList([])
                           , Message(Error(), Default(), <nabl2--get-ast-index> term38)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term38, Type(), type32)
                           , CConj(
                               CAstProperty(
                                 <nabl2--get-ast-index> term38
                               , Params()
                               , (s1, s2)
                               )
                             , CTrue(<nabl2--get-ast-index> term38)
                             )
                           )
                         ))


rules

  nabl2--generate-constraint-Map3-rule(|):
    (nabl2_source, term39@xs, args9) -> constraint6
    with(id)
    with(Params(params18@(s1, s2, s3)) := args9
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2, s3)"
                               , " with actual "
                               , <nabl2--pp-flat-args> args9
                               , " when matching "
                               , "xs"
                               , " with "
                               , <pp-NaBL2-Term> term39
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map3"
                              , " [[ "
                              , <pp-NaBL2-Term> term39
                              , " ^ "
                              , <pp-NaBL2-CTerm> params18
                              , " ]]"
                              ]
           )
         end)
    with(constraint6 := CConj(
                          CAstProperty(
                            <nabl2--get-ast-index> term39
                          , Params()
                          , (s1, s2, s3)
                          )
                        , <nabl2--generate-constraint(nabl2--generate-constraint-Map3-rule(nabl2--generate-constraint-default-rule)|"Map3")> ( nabl2_source
                                                                                                                                             , xs
                                                                                                                                             , Params((s1, s2, s3))
                                                                                                                                             )
                        ))

  nabl2--generate-constraint-Map3-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term40@[x|xs], args10) -> constraint7
    with(id)
    with(Params(params19@(s1, s2, s3)) := args10
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2, s3)"
                               , " with actual "
                               , <nabl2--pp-flat-args> args10
                               , " when matching "
                               , "[x|xs]"
                               , " with "
                               , <pp-NaBL2-Term> term40
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map3"
                              , " [[ "
                              , <pp-NaBL2-Term> term40
                              , " ^ "
                              , <pp-NaBL2-CTerm> params19
                              , " ]]"
                              ]
           )
         end)
    with(constraint7 := CConj(
                          CAstProperty(
                            <nabl2--get-ast-index> term40
                          , Params()
                          , (s1, s2, s3)
                          )
                        , CConj(
                            <nabl2--generate-constraint(nabl2--generate-constraint-X-rule|"X")> ( nabl2_source
                                                                                                , x
                                                                                                , Params((s1, s2, s3))
                                                                                                )
                          , <nabl2--generate-constraint(nabl2--generate-constraint-Map3-rule(nabl2--generate-constraint-X-rule)|"Map3")> ( nabl2_source
                                                                                                                                         , xs
                                                                                                                                         , Params((s1, s2, s3))
                                                                                                                                         )
                          )
                        ))

  nabl2--generate-constraint-Map3-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term41@[], args11) -> constraint8
    with(id)
    with(Params(params20@(s1, s2, s3)) := args11
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2, s3)"
                               , " with actual "
                               , <nabl2--pp-flat-args> args11
                               , " when matching "
                               , "[]"
                               , " with "
                               , <pp-NaBL2-Term> term41
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map3"
                              , " [[ "
                              , <pp-NaBL2-Term> term41
                              , " ^ "
                              , <pp-NaBL2-CTerm> params20
                              , " ]]"
                              ]
           )
         end)
    with(constraint8 := CConj(
                          CAstProperty(
                            <nabl2--get-ast-index> term41
                          , Params()
                          , (s1, s2, s3)
                          )
                        , CTrue(<nabl2--get-ast-index> term41)
                        ))


rules

  nabl2--generate-constraint-Map3t-rule(|):
    (nabl2_source, term42@xs, args6) -> constraint3
    with(ty := <nabl2--fresh-var(|nabl2_source)> "ty" ; id)
    with(ParamsAndType(
           params15@(s1, s2, s3)
         , type33
         ) := args6
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2, s3) : type33"
                               , " with actual "
                               , <nabl2--pp-flat-args> args6
                               , " when matching "
                               , "xs"
                               , " with "
                               , <pp-NaBL2-Term> term42
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map3t"
                              , " [[ "
                              , <pp-NaBL2-Term> term42
                              , " ^ "
                              , <pp-NaBL2-CTerm> params15
                              , " : "
                              , <pp-NaBL2-objlangterm> type33
                              , " ]]"
                              ]
           )
         end)
    with(constraint3 := CConj(
                          CEqual(
                            type33
                          , ty
                          , Message(Error(), Default(), <nabl2--get-ast-index> term42)
                          )
                        , CConj(
                            CAstProperty(<nabl2--get-ast-index> term42, Type(), type33)
                          , CConj(
                              CAstProperty(
                                <nabl2--get-ast-index> term42
                              , Params()
                              , (s1, s2, s3)
                              )
                            , <nabl2--generate-constraint(nabl2--generate-constraint-Map3t-rule(nabl2--generate-constraint-default-rule)|"Map3t")> ( nabl2_source
                                                                                                                                                   , xs
                                                                                                                                                   , ParamsAndType((s1, s2, s3), ty)
                                                                                                                                                   )
                            )
                          )
                        ))

  nabl2--generate-constraint-Map3t-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term43@[x|xs], args7) -> constraint4
    with(ty := <nabl2--fresh-var(|nabl2_source)> "ty" ; id)
    with(ParamsAndType(
           params16@(s1, s2, s3)
         , type34
         ) := args7
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2, s3) : type34"
                               , " with actual "
                               , <nabl2--pp-flat-args> args7
                               , " when matching "
                               , "[x|xs]"
                               , " with "
                               , <pp-NaBL2-Term> term43
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map3t"
                              , " [[ "
                              , <pp-NaBL2-Term> term43
                              , " ^ "
                              , <pp-NaBL2-CTerm> params16
                              , " : "
                              , <pp-NaBL2-objlangterm> type34
                              , " ]]"
                              ]
           )
         end)
    with(constraint4 := CConj(
                          CEqual(
                            type34
                          , ty
                          , Message(Error(), Default(), <nabl2--get-ast-index> term43)
                          )
                        , CConj(
                            CAstProperty(<nabl2--get-ast-index> term43, Type(), type34)
                          , CConj(
                              CAstProperty(
                                <nabl2--get-ast-index> term43
                              , Params()
                              , (s1, s2, s3)
                              )
                            , CConj(
                                <nabl2--generate-constraint(nabl2--generate-constraint-X-rule|"X")> ( nabl2_source
                                                                                                    , x
                                                                                                    , ParamsAndType((s1, s2, s3), ty)
                                                                                                    )
                              , <nabl2--generate-constraint(nabl2--generate-constraint-Map3t-rule(nabl2--generate-constraint-X-rule)|"Map3t")> ( nabl2_source
                                                                                                                                               , xs
                                                                                                                                               , ParamsAndType((s1, s2, s3), ty)
                                                                                                                                               )
                              )
                            )
                          )
                        ))

  nabl2--generate-constraint-Map3t-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term44@[], args8) -> constraint5
    with(wld1 := <nabl2--fresh-var(|nabl2_source)> "wld1" ; id)
    with(ParamsAndType(
           params17@(s1, s2, s3)
         , type35
         ) := args8
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2, s3) : type35"
                               , " with actual "
                               , <nabl2--pp-flat-args> args8
                               , " when matching "
                               , "[]"
                               , " with "
                               , <pp-NaBL2-Term> term44
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map3t"
                              , " [[ "
                              , <pp-NaBL2-Term> term44
                              , " ^ "
                              , <pp-NaBL2-CTerm> params17
                              , " : "
                              , <pp-NaBL2-objlangterm> type35
                              , " ]]"
                              ]
           )
         end)
    with(constraint5 := CConj(
                          CEqual(
                            type35
                          , wld1
                          , Message(Error(), Default(), <nabl2--get-ast-index> term44)
                          )
                        , CConj(
                            CAstProperty(<nabl2--get-ast-index> term44, Type(), type35)
                          , CConj(
                              CAstProperty(
                                <nabl2--get-ast-index> term44
                              , Params()
                              , (s1, s2, s3)
                              )
                            , CTrue(<nabl2--get-ast-index> term44)
                            )
                          )
                        ))


rules

  nabl2--generate-constraint-Map3T-rule(|):
    (nabl2_source, term45@xs, args3) -> constraint0
    with(tys := <nabl2--fresh-var(|nabl2_source)> "tys" ; id)
    with(ParamsAndType(
           params12@(s1, s2, s3)
         , type36
         ) := args3
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2, s3) : type36"
                               , " with actual "
                               , <nabl2--pp-flat-args> args3
                               , " when matching "
                               , "xs"
                               , " with "
                               , <pp-NaBL2-Term> term45
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map3T"
                              , " [[ "
                              , <pp-NaBL2-Term> term45
                              , " ^ "
                              , <pp-NaBL2-CTerm> params12
                              , " : "
                              , <pp-NaBL2-objlangterm> type36
                              , " ]]"
                              ]
           )
         end)
    with(constraint0 := CConj(
                          CEqual(
                            type36
                          , tys
                          , Message(Error(), Default(), <nabl2--get-ast-index> term45)
                          )
                        , CConj(
                            CAstProperty(<nabl2--get-ast-index> term45, Type(), type36)
                          , CConj(
                              CAstProperty(
                                <nabl2--get-ast-index> term45
                              , Params()
                              , (s1, s2, s3)
                              )
                            , <nabl2--generate-constraint(nabl2--generate-constraint-Map3T-rule(nabl2--generate-constraint-default-rule)|"Map3T")> ( nabl2_source
                                                                                                                                                   , xs
                                                                                                                                                   , ParamsAndType((s1, s2, s3), tys)
                                                                                                                                                   )
                            )
                          )
                        ))

  nabl2--generate-constraint-Map3T-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term46@[x|xs], args4) -> constraint1
    with(ty := <nabl2--fresh-var(|nabl2_source)> "ty"
         ; tys := <nabl2--fresh-var(|nabl2_source)> "tys"
         ; id)
    with(ParamsAndType(
           params13@(s1, s2, s3)
         , type37
         ) := args4
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2, s3) : type37"
                               , " with actual "
                               , <nabl2--pp-flat-args> args4
                               , " when matching "
                               , "[x|xs]"
                               , " with "
                               , <pp-NaBL2-Term> term46
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map3T"
                              , " [[ "
                              , <pp-NaBL2-Term> term46
                              , " ^ "
                              , <pp-NaBL2-CTerm> params13
                              , " : "
                              , <pp-NaBL2-objlangterm> type37
                              , " ]]"
                              ]
           )
         end)
    with(constraint1 := CConj(
                          CEqual(
                            type37
                          , CListTail([ty], tys)
                          , Message(Error(), Default(), <nabl2--get-ast-index> term46)
                          )
                        , CConj(
                            CAstProperty(<nabl2--get-ast-index> term46, Type(), type37)
                          , CConj(
                              CAstProperty(
                                <nabl2--get-ast-index> term46
                              , Params()
                              , (s1, s2, s3)
                              )
                            , CConj(
                                <nabl2--generate-constraint(nabl2--generate-constraint-X-rule|"X")> ( nabl2_source
                                                                                                    , x
                                                                                                    , ParamsAndType((s1, s2, s3), ty)
                                                                                                    )
                              , <nabl2--generate-constraint(nabl2--generate-constraint-Map3T-rule(nabl2--generate-constraint-X-rule)|"Map3T")> ( nabl2_source
                                                                                                                                               , xs
                                                                                                                                               , ParamsAndType((s1, s2, s3), tys)
                                                                                                                                               )
                              )
                            )
                          )
                        ))

  nabl2--generate-constraint-Map3T-rule(nabl2--generate-constraint-X-rule|):
    (nabl2_source, term47@[], args5) -> constraint2
    with(id)
    with(ParamsAndType(
           params14@(s1, s2, s3)
         , type38
         ) := args5
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s1, s2, s3) : type38"
                               , " with actual "
                               , <nabl2--pp-flat-args> args5
                               , " when matching "
                               , "[]"
                               , " with "
                               , <pp-NaBL2-Term> term47
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Map3T"
                              , " [[ "
                              , <pp-NaBL2-Term> term47
                              , " ^ "
                              , <pp-NaBL2-CTerm> params14
                              , " : "
                              , <pp-NaBL2-objlangterm> type38
                              , " ]]"
                              ]
           )
         end)
    with(constraint2 := CConj(
                          CEqual(
                            type38
                          , CList([])
                          , Message(Error(), Default(), <nabl2--get-ast-index> term47)
                          )
                        , CConj(
                            CAstProperty(<nabl2--get-ast-index> term47, Type(), type38)
                          , CConj(
                              CAstProperty(
                                <nabl2--get-ast-index> term47
                              , Params()
                              , (s1, s2, s3)
                              )
                            , CTrue(<nabl2--get-ast-index> term47)
                            )
                          )
                        ))