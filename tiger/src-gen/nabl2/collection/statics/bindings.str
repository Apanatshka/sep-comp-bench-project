module statics/bindings

imports
  signatures/nabl2/shared/-
  signatures/nabl2/shared/common/-
  signatures/nabl2/shared/constraints/-
  nabl2/shared/-
  signatures/nabl2/runtime/-
  signatures/nabl2/runtime/analysis/-
  signatures/nabl2/runtime/common/-
  nabl2/runtime/-
  nabl2/runtime/analysis/-
  nabl2/runtime/prelude/-
  nabl2/runtime/stdlib/-


rules


rules


rules


imports
  signatures/-


imports
  statics/nabl-lib


imports
  statics/base


imports
  statics/control-flow


imports
  statics/variables


rules

  nabl2--generate-constraint-default-rule(|):
    ( nabl2_source
    , term83@l@Let(blocks, exps)
    , args25
    ) -> constraint11
    with(ty := <nabl2--fresh-var(|nabl2_source)> "ty"
         ; s_body := <nabl2--fresh-var(|nabl2_source)> "s_body"
         ; id)
    with(ParamsAndType(params17@(s), type23) := args25
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s) : type23"
                               , " with actual "
                               , <nabl2--pp-flat-args> args25
                               , " when matching "
                               , "Let(blocks, exps)"
                               , " with "
                               , <pp-NaBL2-Term> term83
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "default"
                              , " [[ "
                              , <pp-NaBL2-Term> term83
                              , " ^ "
                              , <pp-NaBL2-CTerm> params17
                              , " : "
                              , <pp-NaBL2-objlangterm> type23
                              , " ]]"
                              ]
           )
         end)
    with(constraint11 := CConj(
                           CEqual(
                             type23
                           , ty
                           , Message(Error(), Default(), <nabl2--get-ast-index> term83)
                           )
                         , CConj(
                             CAstProperty(<nabl2--get-ast-index> term83, Type(), type23)
                           , CConj(
                               CAstProperty(
                                 <nabl2--get-ast-index> term83
                               , Params()
                               , (s)
                               )
                             , CConj(
                                 CNew([s_body], <nabl2--get-ast-index> term83)
                               , CConj(
                                   CAstProperty(
                                     <nabl2--get-ast-index> l
                                   , Property("bodyScope")
                                   , s_body
                                   )
                                 , CConj(
                                     <nabl2--generate-constraint(nabl2--generate-constraint-Decs-rule|"Decs")> (nabl2_source, blocks, Params((s, s_body)))
                                   , CConj(
                                       <nabl2--generate-constraint(nabl2--generate-constraint-Seq-rule|"Seq")> (nabl2_source, exps, ParamsAndType((s_body), ty))
                                     , CDistinct(
                                         NoProjection()
                                       , Declarations(s_body, DefaultNamespace())
                                       , Message(Error(), Default(), <nabl2--get-ast-index> term83)
                                       )
                                     )
                                   )
                                 )
                               )
                             )
                           )
                         ))

  nabl2--generate-constraint-Decs-rule(|):
    (nabl2_source, term84@[], args26) -> constraint12
    with(id)
    with(Params(params18@(s_outer, s_body)) := args26
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s_outer, s_body)"
                               , " with actual "
                               , <nabl2--pp-flat-args> args26
                               , " when matching "
                               , "[]"
                               , " with "
                               , <pp-NaBL2-Term> term84
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Decs"
                              , " [[ "
                              , <pp-NaBL2-Term> term84
                              , " ^ "
                              , <pp-NaBL2-CTerm> params18
                              , " ]]"
                              ]
           )
         end)
    with(constraint12 := CConj(
                           CAstProperty(
                             <nabl2--get-ast-index> term84
                           , Params()
                           , (s_outer, s_body)
                           )
                         , CGDirectEdge(
                             s_body
                           , P()
                           , s_outer
                           , <nabl2--get-ast-index> term84
                           )
                         ))

  nabl2--generate-constraint-Decs-rule(|):
    (nabl2_source, term85@[block], args27) -> constraint13
    with(id)
    with(Params(params19@(s_outer, s_body)) := args27
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s_outer, s_body)"
                               , " with actual "
                               , <nabl2--pp-flat-args> args27
                               , " when matching "
                               , "[block]"
                               , " with "
                               , <pp-NaBL2-Term> term85
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Decs"
                              , " [[ "
                              , <pp-NaBL2-Term> term85
                              , " ^ "
                              , <pp-NaBL2-CTerm> params19
                              , " ]]"
                              ]
           )
         end)
    with(constraint13 := CConj(
                           CAstProperty(
                             <nabl2--get-ast-index> term85
                           , Params()
                           , (s_outer, s_body)
                           )
                         , CConj(
                             CGDirectEdge(
                               s_body
                             , P()
                             , s_outer
                             , <nabl2--get-ast-index> term85
                             )
                           , <nabl2--generate-constraint(nabl2--generate-constraint-Dec-rule|"Dec")> (nabl2_source, block, Params((s_body, s_outer)))
                           )
                         ))

  nabl2--generate-constraint-Decs-rule(|):
    ( nabl2_source
    , term86@[block|blocks@[wld1|wld2]]
    , args28
    ) -> constraint14
    with(s_dec := <nabl2--fresh-var(|nabl2_source)> "s_dec" ; id)
    with(Params(params20@(s_outer, s_body)) := args28
         <+ fatal-err(
            | <concat-strings> [ "Cannot match expected "
                               , "^ (s_outer, s_body)"
                               , " with actual "
                               , <nabl2--pp-flat-args> args28
                               , " when matching "
                               , "[block|[wld1|wld2]]"
                               , " with "
                               , <pp-NaBL2-Term> term86
                               , "."
                               ]
            ))
    with(if nabl2--is-debug-collection-enabled then
           nabl2--collection-info-msg(
           | <concat-strings> [ "Decs"
                              , " [[ "
                              , <pp-NaBL2-Term> term86
                              , " ^ "
                              , <pp-NaBL2-CTerm> params20
                              , " ]]"
                              ]
           )
         end)
    with(constraint14 := CConj(
                           CAstProperty(
                             <nabl2--get-ast-index> term86
                           , Params()
                           , (s_outer, s_body)
                           )
                         , CConj(
                             CNew([s_dec], <nabl2--get-ast-index> term86)
                           , CConj(
                               CGDirectEdge(
                                 s_dec
                               , P()
                               , s_outer
                               , <nabl2--get-ast-index> term86
                               )
                             , CConj(
                                 CAstProperty(
                                   <nabl2--get-ast-index> block
                                 , Property("bodyScope")
                                 , s_dec
                                 )
                               , CConj(
                                   <nabl2--generate-constraint(nabl2--generate-constraint-Dec-rule|"Dec")> (nabl2_source, block, Params((s_dec, s_outer)))
                                 , CConj(
                                     <nabl2--generate-constraint(nabl2--generate-constraint-Decs-rule|"Decs")> (nabl2_source, blocks, Params((s_dec, s_body)))
                                   , CDistinct(
                                       Projection("name")
                                     , Declarations(s_dec, DefaultNamespace())
                                     , Message(
                                         Error()
                                       , Formatted([Text("duplicate declaration")])
                                       , NAME()
                                       )
                                     )
                                   )
                                 )
                               )
                             )
                           )
                         ))